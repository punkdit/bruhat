#!/usr/bin/env python3

from operator import mul
from functools import reduce

import numpy


from bruhat.poly import Poly, Q
from bruhat.util import cross, all_subsets, factorial
from bruhat.argv import argv
from bruhat.elim import solve, shortstr


ring = Q
a = Poly("a", ring)


def interp(vals):
    n = len(vals)

    p = Poly({}, ring)
    one = Poly({():ring.one}, ring)
    
    for i in range(n):
        #print(i, vals[i])
        y0 = p(a=i)
        q = one
        for j in range(i):
            q = q*(a-j)
        #print("q:", q)
        for j in range(i):
            assert q(a=j) == 0
        #print("q(%d)=%s"%(i, q(a=i)))
        r = ring.one / factorial(i)
        #print("r =", r)
        if y0 != vals[i]:
            p = p + (vals[i] - y0)*r*q
        #print("p(%d)=%s"%(i, p(a=i)))
        #print()
    return p


def multi_interp(target):
    shape = target.shape
    n = len(shape)
    #print("multi_interp", shape)
    vs = 'abcde'[:n]
    ms = [Poly(v, ring) for v in vs]
    #print(ms)
    itemss = [list(range(i)) for i in shape]
    coords = []
    for idxs in cross(itemss):
        namespace = dict((vs[i], idxs[i]) for i in range(n))
        #print(namespace)
        coords.append(namespace)
    A = []
    polys = []
    for idxs in cross(itemss):
        p = reduce(mul, [p**i for (p,i) in zip(ms, idxs)])
        polys.append(p)
        #print(idxs, p)
        row = []
        for coord in coords:
            v = p.substitute(coord)
            row.append(ring.promote(v))
        A.append(row)
    A = numpy.array(A, dtype=object)
    A = A.transpose()
    #print(A.shape)
    #print(shortstr(A))
    rhs = target.view()
    rhs.shape = (len(A),1)
    #print(rhs)

    print("solve...")
    v = solve(ring, A, rhs)
    assert v is not None
    print(shortstr(v))
    q = ring.zero
    for i, p in enumerate(polys):
        q = q + v[i, 0]*p
    return q


def multi_factorize(p, N=10, denom=2):
    vs = p.get_vars()
    #print("multi_factorize", vs)
    ring = p.ring
    d = p.degree
    factors = []

    idxss = list(all_subsets(len(vs)))
    idxss.sort(key = len)
    assert idxss[0] == []
    idxss.pop(0)
    for idxs in idxss:
        subvs = [vs[idx] for idx in idxs]
        print("subvs:", subvs)
        coords = [[-ring.promote(x)/denom for x in range(N)] for v in subvs]
        for ii in cross(coords):
            kw = dict((subvs[i], ii[i]) for i in range(len(subvs)))
            y = p(**kw)
            if y!=0:
                continue
            q = ring.zero
            for k,v in kw.items():
                #print("\t", k, v)
                q += Poly(k, ring) - v
            while 1:
                print("factor:", q)
                div, rem = q.reduce(p)
                if rem != 0:
                    break
                factors.append(q)
                p = div
                print("\t", p)
            if p.degree == 1:
                break

    if p != 1:
        factors.append(p)
    return factors


def factorize(p):
    ring = p.ring
    d = p.degree
    factors = []
    for i in range(6*20):
        i = ring.one*i/6
        y = p(a=-i)
        if y!=0:
            continue
        while 1:
            f = (a+i)
            div, rem = f.reduce(p)
            if rem != 0:
                break
            factors.append(a+i)
            p = div
    if p != 1:
        factors.append(p)
    return factors


if argv.vals is not None:
    vals = argv.get("vals", [1, 4, 10, 20, 35, 56])
    p = interp(vals)
    
    print("p =", p)
    print("degree =", p.degree)
    print("factors:", factorize(p))
    
    #print(["%s"%p(a=i) for i in range(n)])
    #print([(a-i).reduce(p)[1] for i in range(n)])

elif 1:

    if 0:
        # B2
        vals = numpy.array(
            [[1, 10, 35, 84, 165], 
            [5, 35, 105, 231, 429], 
            [14, 81, 220, 455, 810], 
            [30, 154, 390, 770, 1326], 
            [55, 260, 625, 1190, 1995]])
    elif 1:
        # B3
        vals = numpy.array(
        [[[1, 35, 294, 1386, 4719, 13013], [21, 378, 2310, 9009, 27027, 68068], [168, 2079, 10296, 35035, 95472, 223839], [825, 8008, 34125, 104720, 264537, 585200], [3003, 24570, 93500, 264537, 628425, 1324708], [8918, 64260, 223839, 593047, 1338876, 2709630]], [[7, 189, 1386, 6006, 19305, 51051], [105, 1617, 9009, 33033, 94809, 230945], [693, 7722, 35750, 116025, 305235, 696388], [3003, 27027, 109395, 323323, 793611, 1716099], [10010, 77350, 282625, 775523, 1798692, 3719100], [27846, 191862, 646646, 1670214, 3694950, 7354710]], [[27, 616, 4095, 16632, 51051, 130416], [330, 4550, 23625, 82467, 228228, 540540], [1911, 19683, 86394, 269724, 688905, 1535457], [7560, 64141, 248976, 713097, 1707888, 3620925], [23562, 173888, 614250, 1642200, 3730650, 7584192], [62244, 413343, 1354815, 3423420, 7440174, 14593293]], [[77, 1560, 9625, 37128, 109725, 272272], [819, 10395, 51051, 171171, 459459, 1062347], [4312, 41769, 175560, 530621, 1321488, 2886345], [15912, 128744, 482664, 1345960, 3155880, 6575976], [47025, 334152, 1147125, 2998800, 6690033, 13398000], [119119, 766935, 2454375, 6084351, 13017375, 25199559]], [[182, 3375, 19635, 72618, 207900, 503217], [1750, 20825, 97755, 316932, 828828, 1876875], [8568, 79002, 320320, 941850, 2295000, 4924458], [29925, 232848, 847665, 2310000, 5316597, 10909800], [84700, 583050, 1953125, 5006925, 10992450, 21721700], [207207, 1299375, 4072860, 9927918, 20945925, 40072417]], [[378, 6545, 36309, 129654, 361284, 855855], [3366, 38038, 171990, 541926, 1385670, 3081078], [15561, 137781, 541926, 1556100, 3720087, 7857927], [51975, 391391, 1389375, 3711015, 8402199, 17007375], [141933, 950950, 3118500, 7857927, 17007375, 33205788], [337155, 2066715, 6361179, 15275715, 31827411, 60244107]]])

        vals = numpy.array(
            [[[1, 35, 294, 1386, 4719, 13013, 30940], [21, 378, 2310, 9009, 27027, 68068, 151164], [168, 2079, 10296, 35035, 95472, 223839, 470288], [825, 8008, 34125, 104720, 264537, 585200, 1174173], [3003, 24570, 93500, 264537, 628425, 1324708, 2556450], [8918, 64260, 223839, 593047, 1338876, 2709630, 5057325], [22848, 149226, 484120, 1214906, 2627520, 5135130, 9310392]], [[7, 189, 1386, 6006, 19305, 51051, 117572], [105, 1617, 9009, 33033, 94809, 230945, 499681], [693, 7722, 35750, 116025, 305235, 696388, 1431612], [3003, 27027, 109395, 323323, 793611, 1716099, 3380195], [10010, 77350, 282625, 775523, 1798692, 3719100, 7063875], [27846, 191862, 646646, 1670214, 3694950, 7354710, 13538070], [67830, 427329, 1349019, 3313380, 7042140, 13565475, 24297273]], [[27, 616, 4095, 16632, 51051, 130416, 292383], [330, 4550, 23625, 82467, 228228, 540540, 1143675], [1911, 19683, 86394, 269724, 688905, 1535457, 3097380], [7560, 64141, 248976, 713097, 1707888, 3620925, 7017192], [23562, 173888, 614250, 1642200, 3730650, 7584192, 14203098], [62244, 413343, 1354815, 3423420, 7440174, 14593293, 26531505], [145530, 889525, 2743125, 6612354, 13838916, 26316675, 46621575]], [[77, 1560, 9625, 37128, 109725, 272272, 596505], [819, 10395, 51051, 171171, 459459, 1062347, 2204475], [4312, 41769, 175560, 530621, 1321488, 2886345, 5726448], [15912, 128744, 482664, 1345960, 3155880, 6575976, 12561640], [47025, 334152, 1147125, 2998800, 6690033, 13398000, 24776037], [119119, 766935, 2454375, 6084351, 13017375, 25199559, 45305975], [269192, 1603525, 4845456, 11488785, 23717232, 44581845, 78198120]], [[182, 3375, 19635, 72618, 207900, 503217, 1080625], [1750, 20825, 97755, 316932, 828828, 1876875, 3828825], [8568, 79002, 320320, 941850, 2295000, 4924458, 9627072], [29925, 232848, 847665, 2310000, 5316597, 10909800, 20573553], [84700, 583050, 1953125, 5006925, 10992450, 21721700, 39714675], [207207, 1299375, 4072860, 9927918, 20945925, 40072417, 71321250], [455000, 2650725, 7868280, 18384457, 37488528, 69733125, 121212000]], [[378, 6545, 36309, 129654, 361284, 855855, 1805895], [3366, 38038, 171990, 541926, 1385670, 3081078, 6191094], [15561, 137781, 541926, 1556100, 3720087, 7857927, 15160860], [51975, 391391, 1389375, 3711015, 8402199, 17007375, 31702671], [141933, 950950, 3118500, 7857927, 17007375, 33205788, 60090030], [337155, 2066715, 6361179, 15275715, 31827411, 60244107, 106240875], [722358, 4127396, 12059775, 27810783, 56084028, 103333230, 178134957]], [[714, 11704, 62426, 216384, 589050, 1369368, 2844842], [5985, 64827, 284004, 873180, 2189187, 4789785, 9495486], [26411, 226044, 866250, 2436525, 5727645, 11930226, 22746724], [85008, 622545, 2162160, 5674053, 12660648, 25314289, 46694648], [225225, 1474200, 4745125, 11775288, 25162137, 48596240, 87121125], [521703, 3135132, 9495486, 22499477, 46351305, 86888802, 151944520], [1094170, 6145874, 17706689, 40353607, 80562468, 147147000, 251741763]]])
        vals = numpy.array(
[[[1, 35, 294, 1386, 4719, 13013, 30940, 65892], [21, 378, 2310, 9009, 27027, 68068, 151164, 305235], [168, 2079, 10296, 35035, 95472, 223839, 470288, 908523], [825, 8008, 34125, 104720, 264537, 585200, 1174173, 2185000], [3003, 24570, 93500, 264537, 628425, 1324708, 2556450, 4606875], [8918, 64260, 223839, 593047, 1338876, 2709630, 5057325, 8862777], [22848, 149226, 484120, 1214906, 2627520, 5135130, 9310392, 15921290], [52326, 316008, 966966, 2318400, 4833270, 9164232, 16198182, 27105408]], [[7, 189, 1386, 6006, 19305, 51051, 117572, 244188], [105, 1617, 9009, 33033, 94809, 230945, 499681, 988057], [693, 7722, 35750, 116025, 305235, 696388, 1431612, 2716875], [3003, 27027, 109395, 323323, 793611, 1716099, 3380195, 6194475], [10010, 77350, 282625, 775523, 1798692, 3719100, 7063875, 12560625], [27846, 191862, 646646, 1670214, 3694950, 7354710, 13538070, 23447718], [67830, 427329, 1349019, 3313380, 7042140, 13565475, 24297273, 41118462], [149226, 874874, 2616250, 6158250, 12645450, 23674266, 41395354, 68626250]], [[27, 616, 4095, 16632, 51051, 130416, 292383, 594320], [330, 4550, 23625, 82467, 228228, 540540, 1143675, 2220625], [1911, 19683, 86394, 269724, 688905, 1535457, 3097380, 5786802], [7560, 64141, 248976, 713097, 1707888, 3620925, 7017192, 12685673], [23562, 173888, 614250, 1642200, 3730650, 7584192, 14203098, 24955000], [62244, 413343, 1354815, 3423420, 7440174, 14593293, 26531505, 45467730], [145530, 889525, 2743125, 6612354, 13838916, 26316675, 46621575, 78155000], [309672, 1770230, 5189184, 12018006, 24347400, 45064998, 78029952, 128264422]], [[77, 1560, 9625, 37128, 109725, 272272, 596505, 1190000], [819, 10395, 51051, 171171, 459459, 1062347, 2204475, 4212243], [4312, 41769, 175560, 530621, 1321488, 2886345, 5726448, 10550925], [15912, 128744, 482664, 1345960, 3155880, 6575976, 12561640, 22433832], [47025, 334152, 1147125, 2998800, 6690033, 13398000, 24776037, 43065000], [119119, 766935, 2454375, 6084351, 13017375, 25199559, 45305975, 76899375], [269192, 1603525, 4845456, 11488785, 23717232, 44581845, 78198120, 129962833], [556920, 3114936, 8972600, 20483064, 40997880, 75104568, 128888760, 210220920]], [[182, 3375, 19635, 72618, 207900, 503217, 1080625, 2120580], [1750, 20825, 97755, 316932, 828828, 1876875, 3828825, 7212590], [8568, 79002, 320320, 941850, 2295000, 4924458, 9627072, 17518410], [29925, 232848, 847665, 2310000, 5316597, 10909800, 20573553, 36340920], [84700, 583050, 1953125, 5006925, 10992450, 21721700, 39714675, 68359375], [207207, 1299375, 4072860, 9927918, 20945925, 40072417, 71321250, 119999880], [455000, 2650725, 7868280, 18384457, 37488528, 69733125, 121212000, 199864665], [918918, 5042752, 14302470, 32232200, 63813750, 115809408, 197128022, 319224360]], [[378, 6545, 36309, 129654, 361284, 855855, 1805895, 3492412], [3366, 38038, 171990, 541926, 1385670, 3081078, 6191094, 11514950], [15561, 137781, 541926, 1556100, 3720087, 7857927, 15160860, 27280638], [51975, 391391, 1389375, 3711015, 8402199, 17007375, 31702671, 55444375], [141933, 950950, 3118500, 7857927, 17007375, 33205788, 60090030, 102513125], [337155, 2066715, 6361179, 15275715, 31827411, 60244107, 106240875, 177324147], [722358, 4127396, 12059775, 27810783, 56084028, 103333230, 178134957, 291596305], [1428714, 7710010, 21567546, 48044010, 94180170, 169459290, 286294554, 460559498]], [[714, 11704, 62426, 216384, 589050, 1369368, 2844842, 5430208], [5985, 64827, 284004, 873180, 2189187, 4789785, 9495486, 17459442], [26411, 226044, 866250, 2436525, 5727645, 11930226, 22746724, 40516875], [85008, 622545, 2162160, 5674053, 12660648, 25314289, 46694648, 80925845], [225225, 1474200, 4745125, 11775288, 25162137, 48596240, 87121125, 147420000], [521703, 3135132, 9495486, 22499477, 46351305, 86888802, 151944520, 251741763], [1094170, 6145874, 17706689, 40353607, 80562468, 147147000, 251741763, 409328997], [2124864, 11297286, 31213000, 68803350, 133660800, 238612374, 400346856, 640095750]], [[1254, 19656, 101430, 342720, 914166, 2090088, 4282278, 8078400], [10010, 104650, 446250, 1343034, 3309306, 7137130, 13978250, 25436250], [42504, 353430, 1324224, 3657654, 8470440, 17422790, 32864832, 57999942], [132600, 948024, 3230136, 8344952, 18378360, 36340920, 66397240, 114119928], [342342, 2195648, 6951750, 17017000, 35945910, 68740672, 122183958, 205205000], [775866, 4581738, 13679050, 32024538, 65300634, 121331210, 210540330, 346454010], [1597120, 8835750, 25137000, 56678006, 112117824, 203152950, 345126600, 557691750], [3051840, 16011072, 43744064, 95507776, 184008000, 326120256, 543676224, 864315712]]]
)

    if 0:
        vals = [[1, 3, 6, 10, 15], 
            [3, 8, 15, 24, 35], 
            [6, 15, 27, 42, 60], 
            [10, 24, 42, 64, 90], 
            [15, 35, 60, 90, 125]]
    
        a = Poly("a", ring)
        b = Poly("b", ring)
        p = (a+1)*(b+1)*(a+b+2)/2
        print(p)
    
        #p = (a+b)**2
        N = 4
        vals = [[p.substitute({"a":a, "b":b}) for a in range(N)] for b in range(N)]
        vals = numpy.array(vals)
        #print(vals)

    p = multi_interp(vals)
    print(p)

    factors = multi_factorize(p)
    print(factors)
    

elif 0:
    f = lambda a, b, c : (a+1)*(b+1)*(c+1)*(a+b+2)*(b+c+2)*(a+b+c+3)//12
    
    N = 5
    for c in range(3):
        for b in range(N):
            for a in range(N):
                print("%6s"%f(a, b, c), end=" ")
            print()
        print()
    
    
elif 0:
    f = lambda a, b, c, d : (
        (a+1)*(b+1)*(c+1)*(d+1)*
        (a+b+2)*(b+c+2)*(c+d+2)*
        (a+b+c+3)*(b+c+d+3)*
        (a+b+c+d+4)
        //288)
    
    
    N = 5
    for d in range(3):
     for c in range(3):
      for b in range(N):
       for a in range(N):
        print("%6s"%f(a, b, c, d), end=" ")
       print()
      print()
     print()

