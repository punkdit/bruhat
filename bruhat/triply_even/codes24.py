#!/usr/bin/env python3

"""
Here we show the 9 doubly even, self-dual codes of length 24.
"""


from qupy.ldpc.gallagher import classical_distance
from bruhat.solve import array2, shortstr, dot2, span
from bruhat.codes import strong_morthogonal

# ripped from :
# http://www.math.is.tohoku.ac.jp/~munemasa/research/codes/data/2/24-II.magma
# See also:
# Database of Binary Self-Dual Codes
# http://www.math.is.tohoku.ac.jp/~munemasa/research/codes/sd2.htm
#
# On the Classification and Enumeration of
# Self-Dual Codes
# VERA PLESS* AND N. J. A. SLOANE
# JOURNAL OF COMBINATORIAL THEORY (A) 18, 313-335 (1975) 
# http://citeseerx.ist.psu.edu/viewdoc/download?doi=10.1.1.646.3571&rep=rep1&type=pdf


items = [
    [[1,0,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,1,0],
     [0,1,0,1,0,1,0,1,0,1,0,1,0,0,0,0,0,0,0,0,0,0,1,1],
     [0,0,1,1,0,0,0,0,0,0,0,0,0,1,0,1,0,1,0,1,0,1,0,1],
     [0,0,0,0,1,1,0,0,0,0,0,0,0,1,0,1,0,1,0,1,0,1,0,1],
     [0,0,0,0,0,0,1,1,0,0,0,0,0,1,0,1,0,1,0,1,0,1,0,1],
     [0,0,0,0,0,0,0,0,1,1,0,0,0,1,0,1,0,1,0,1,0,1,0,1],
     [0,0,0,0,0,0,0,0,0,0,1,1,0,1,0,1,0,1,0,1,0,1,0,1],
     [0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,1,1],
     [0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,1,1],
     [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,1,1],
     [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,1,1],
     [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1]],
    [[1,0,0,1,0,1,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,1,1,1],
     [0,1,0,1,0,1,0,1,0,1,0,0,0,0,1,1,1,0,0,0,0,0,0,0],
     [0,0,1,1,0,0,0,0,0,0,0,0,0,0,1,1,1,0,0,0,0,1,1,1],
     [0,0,0,0,1,1,0,0,0,0,0,0,0,0,1,1,1,0,0,0,0,1,1,1],
     [0,0,0,0,0,0,1,1,0,0,0,0,0,0,1,1,1,0,0,0,0,1,1,1],
     [0,0,0,0,0,0,0,0,1,1,0,0,0,0,1,1,1,0,0,0,0,1,1,1],
     [0,0,0,0,0,0,0,0,0,0,1,0,0,1,0,1,1,0,0,0,0,0,0,0],
     [0,0,0,0,0,0,0,0,0,0,0,1,0,1,1,0,1,0,0,0,0,0,0,0],
     [0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,0,0,0,0,0,0,0,0],
     [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,1,0,1,1],
     [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,1,0,1],
     [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,0]],
    [[1,0,0,1,0,1,0,1,0,0,0,0,0,0,0,0,0,1,0,1,0,1,1,0],
     [0,1,0,1,0,1,0,1,0,0,0,0,0,0,1,1,0,0,0,0,0,0,1,1],
     [0,0,1,1,0,0,0,0,0,0,0,0,0,0,1,1,0,1,0,1,0,1,0,1],
     [0,0,0,0,1,1,0,0,0,0,0,0,0,0,1,1,0,1,0,1,0,1,0,1],
     [0,0,0,0,0,0,1,1,0,0,0,0,0,0,1,1,0,1,0,1,0,1,0,1],
     [0,0,0,0,0,0,0,0,1,0,0,1,0,1,0,1,0,1,0,1,0,1,1,0],
     [0,0,0,0,0,0,0,0,0,1,0,1,0,1,1,0,0,1,0,1,0,1,1,0],
     [0,0,0,0,0,0,0,0,0,0,1,1,0,0,1,1,0,0,0,0,0,0,0,0],
     [0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,0,0,0,0,0,0,0,0],
     [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,1,1],
     [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,1,1],
     [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1]],
    [[1,0,0,1,0,1,0,0,0,0,0,0,0,0,0,0,1,1,0,1,0,1,1,0],
     [0,1,0,1,0,1,0,0,0,0,0,0,0,1,0,1,1,0,0,0,0,0,1,1],
     [0,0,1,1,0,0,0,0,0,0,0,0,0,1,0,1,0,1,0,1,0,1,0,1],
     [0,0,0,0,1,1,0,0,0,0,0,0,0,1,0,1,0,1,0,1,0,1,0,1],
     [0,0,0,0,0,0,1,0,0,1,0,1,0,0,0,0,1,1,0,1,0,1,0,1],
     [0,0,0,0,0,0,0,1,0,1,0,1,0,1,0,1,0,1,0,0,0,0,1,1],
     [0,0,0,0,0,0,0,0,1,1,0,0,0,1,0,1,1,0,0,1,0,1,1,0],
     [0,0,0,0,0,0,0,0,0,0,1,1,0,1,0,1,1,0,0,1,0,1,1,0],
     [0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,1,1,0,0,0,0,0,0],
     [0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,0,0,0,0,0,0],
     [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,1,1],
     [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1]],
    [[1,0,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,1,0],
     [0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1],
     [0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1],
     [0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1],
     [0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1],
     [0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,1,1],
     [0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,1,1],
     [0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,1,1],
     [0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,1,1],
     [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,1,1],
     [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,1,1],
     [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1]],
    [[1,0,0,1,0,0,0,0,0,0,0,0,0,0,1,1,0,1,0,1,0,1,1,0],
     [0,1,0,1,0,0,0,0,0,0,0,0,0,1,0,1,0,0,1,1,0,0,1,1],
     [0,0,1,1,0,0,0,0,0,0,0,0,0,1,1,0,0,1,1,0,0,1,0,1],
     [0,0,0,0,1,0,0,1,0,0,0,0,0,0,1,1,0,1,1,0,0,0,1,1],
     [0,0,0,0,0,1,0,1,0,0,0,0,0,1,1,0,0,0,1,1,0,1,1,0],
     [0,0,0,0,0,0,1,1,0,0,0,0,0,1,0,1,0,1,0,1,0,1,0,1],
     [0,0,0,0,0,0,0,0,1,0,0,1,0,1,1,0,0,1,0,1,0,0,1,1],
     [0,0,0,0,0,0,0,0,0,1,0,1,0,0,1,1,0,0,1,1,0,1,0,1],
     [0,0,0,0,0,0,0,0,0,0,1,1,0,1,0,1,0,1,1,0,0,1,1,0],
     [0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,0,0,0,0,0,0,0,0],
     [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,0,0,0,0],
     [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1]],
    [[1,0,0,0,0,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
     [0,1,0,0,1,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
     [0,0,1,0,1,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
     [0,0,0,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
     [0,0,0,0,0,0,0,0,1,0,0,0,0,1,1,1,0,0,0,0,0,0,0,0],
     [0,0,0,0,0,0,0,0,0,1,0,0,1,0,1,1,0,0,0,0,0,0,0,0],
     [0,0,0,0,0,0,0,0,0,0,1,0,1,1,0,1,0,0,0,0,0,0,0,0],
     [0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,0,0,0,0,0,0,0,0,0],
     [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,1,1,1],
     [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,1,0,1,1],
     [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,1,0,1],
     [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,0]],
    [[1,0,0,0,0,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
     [0,1,0,0,1,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
     [0,0,1,0,1,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
     [0,0,0,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
     [0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1],
     [0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,1,0,1,1,1,1,1,1],
     [0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,1,1,0,1,1,1,1,1],
     [0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,1,1,1,0,1,1,1,1],
     [0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,1,1,1,0,1,1,1],
     [0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,1,1,1,1,1,0,1,1],
     [0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,1,1,1,1,1,0,1],
     [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,0]],
    [[1,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,1,1,1,0,1,0,1],
     [0,1,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,1,1,1,0,1,1],
     [0,0,1,0,0,0,0,0,0,0,0,0,1,1,1,1,0,1,1,0,1,0,0,0],
     [0,0,0,1,0,0,0,0,0,0,0,0,0,1,1,1,1,0,1,1,0,1,0,0],
     [0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,1,1,1,0,1,1,0,1,0],
     [0,0,0,0,0,1,0,0,0,0,0,0,1,1,0,1,1,0,0,1,1,0,0,1],
     [0,0,0,0,0,0,1,0,0,0,0,0,0,1,1,0,1,1,0,0,1,1,0,1],
     [0,0,0,0,0,0,0,1,0,0,0,0,0,0,1,1,0,1,1,0,0,1,1,1],
     [0,0,0,0,0,0,0,0,1,0,0,0,1,1,0,1,1,1,0,0,0,1,1,0],
     [0,0,0,0,0,0,0,0,0,1,0,0,1,0,1,0,1,0,0,1,0,1,1,1],
     [0,0,0,0,0,0,0,0,0,0,1,0,1,0,0,1,0,0,1,1,1,1,1,0],
     [0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,1,1,1,0,1,0,1,1]]]


# notation from PLESS and SLOANE:
names = """
    d_{12}^6 
    d_{10}e_7^2 
    d_8^3
    d_6^4
    d_24
    d_4^6
    e_8+e_8+e_8
    e_8+d_{16}
    g_{24}
"""

names = names.strip().split()
assert len(names) == len(items) == 9

def test():
    for idx, H in enumerate(items):
        H = array2(H)
        #print(H.shape)
    
        print(names[idx])
        print(shortstr(H))
        assert (dot2(H, H.transpose()).sum()) == 0 # orthogonal code
        G = H
        for genus in range(1, 4):
            print(strong_morthogonal(G, genus), end=" ")
        print()
    
        keys = [0, 4, 8, 12, 16, 20, 24]
        counts = {0:0, 4:0, 8:0, 12:0, 16:0, 20:0, 24:0}
    
        for v in span(G):
            counts[v.sum()] += 1
        print([counts[k] for k in keys])
        print()
    

def get(name):
    assert name in names, "%r not found in %s" % (name, names)
    idx = names.index(name)
    H = items[idx]
    H = array2(H)
    return H


if __name__ == "__main__":
    test()



