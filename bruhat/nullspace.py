#!/usr/bin/env python

import sys, os

import numpy

from solve import parse


def nullspace(A, atol=1e-13, rtol=0):
    """Compute an approximate basis for the nullspace of A.

    The algorithm used by this function is based on the singular value
    decomposition of `A`.

    Parameters
    ----------
    A : ndarray
        A should be at most 2-D.  A 1-D array with length k will be treated
        as a 2-D with shape (1, k)
    atol : float
        The absolute tolerance for a zero singular value.  Singular values
        smaller than `atol` are considered to be zero.
    rtol : float
        The relative tolerance.  Singular values less than rtol*smax are
        considered to be zero, where smax is the largest singular value.

    If both `atol` and `rtol` are positive, the combined tolerance is the
    maximum of the two; that is::
        tol = max(atol, rtol * smax)
    Singular values smaller than `tol` are considered to be zero.

    Return value
    ------------
    ns : ndarray
        If `A` is an array with shape (m, k), then `ns` will be an array
        with shape (k, n), where n is the estimated dimension of the
        nullspace of `A`.  The columns of `ns` are a basis for the
        nullspace; each element in numpy.dot(A, ns) will be approximately
        zero.
    """

    A = numpy.atleast_2d(A)
    u, s, vh = numpy.linalg.svd(A)
    tol = max(atol, rtol * s[0])
    nnz = (s >= tol).sum()
    ns = vh[nnz:].conj().T
    return ns



def main():

    H = numpy.array([[1.,1,0.],[0,1,1],[1,0,1]])
    H = numpy.array([[1.,1,1.]])
    ns = nullspace(H)
    assert ns.shape == (3, 2)

    A = parse("""
.........11.1.11.1.11
...1.1.11......1.1.11
...1.1.1111.1.1......
.11....11...11....1.1
..........1111..111.1
.11....11.11....11...
.........1.1.1111.11.
.111.1...1.1......11.
.111.1.......1111....
1.1...11....1.1...11.
1.1.11......1.1.11...
....1111........1111.
1.111....11.......1.1
...11.1.1......11.1.1
1.1...1.111....11....
11....1.1....11....11
....111.1.11.11......
11..11....11.......11
...11.11.1.111.......
11....11.1.1...1.1...
11.11.......11.1.1...
    """)

    B = parse("""
...........1.1..1.1..
....1.1.........1.1..
....1.1....1.1.......
1.....1.......1....1.
.........1....11...1.
1.....1..1.....1.....
..........1.1....1..1
1...1.....1.........1
1...1.......1....1...
.1......1....1......1
.1.1.........1.1.....
...1....1......1....1
.1...1.....1.......1.
.....1.1.........1.1.
.1.....1...1.....1...
..1....1....1.....1..
...1...1.1..1........
..11.....1........1..
.....1..1.1...1......
..1.....1.1.....1....
..1..1........1.1....
    """)

    C = parse("""
...1.1.11............
.........11.1.1......
...............1.1.11
..........11....11...
.11....11............
............11....1.1
.111.1...............
.............1111....
.........1.1......11.
....11..........11...
......11..........11.
1.1.........1.1......
......1.1......11....
1.1......11..........
...11.............1.1
....11....11.........
11.................11
......1.1....11......
11.............1.1...
...11.......11.......
......11.1.1.........
    """)

    D = parse("""
....1.1..............
...........1.1.......
................1.1..
.........1.....1.....
1.....1..............
..............1....1.
1...1................
............1....1...
..........1.........1
...1...........1.....
........1...........1
.1...........1.......
.......1.........1...
.1.........1.........
.....1.............1.
...1.....1...........
..1...............1..
.......1....1........
..1.............1....
.....1........1......
........1.1..........
    """)

    E = parse("""
1....................
.1...................
..1..................
...1.................
....1................
.....1...............
......1..............
.......1.............
........1............
.........1...........
..........1..........
...........1.........
............1........
.............1.......
..............1......
...............1.....
................1....
.................1...
..................1..
...................1.
....................1
    """)

    F = parse("""
.11..................
1.1..................
11...................
....11...............
...1.1...............
...11................
.......11............
......1.1............
......11.............
..........11.........
.........1.1.........
.........11..........
.............11......
............1.1......
............11.......
................11...
...............1.1...
...............11....
...................11
..................1.1
..................11.
    """)


    ops = [A, B, C, D, E, F]
    for a in ops:
        for b in ops:
            if a is b:
                continue
        ns = nullspace(a+b)
        print ns.shape



if __name__ == "__main__":
    main()



    
